{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","components/Landing.styles.ts","components/Landing.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","InputWrapper","userClicked","right","wrong","QuestionCard","callback","questionNr","totalQuestions","userAnswer","useState","selected","setSelected","onRadioChange","e","currentTarget","value","className","dangerouslySetInnerHTML","__html","answer","index","correctAnswer","undefined","type","name","id","onChange","checked","htmlFor","aria-live","aria-hidden","disabled","onClick","LandingWrapper","SelectWrapper","Landing","start","totalQ","setTotalQ","setDifficulty","Number","GlobalStyle","createGlobalStyle","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","qLength","setQLength","startTrivia","newQuestions","correct","prev","answerObject","length","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAmBaA,EAAkB,uCAAG,WAChCC,EACAC,GAFgC,iBAAAC,EAAA,6DAI1BC,EAJ0B,6CAIuBH,EAJvB,mCAIwDC,EAJxD,2BAKNG,MAAMD,GALA,8BAKWE,OALX,cAK1BC,EAL0B,yBAOzBA,EAAKC,QAAQC,KAAI,SAACC,GAAD,mBAAC,eACpBA,GADmB,IAEtBC,SC5ByBC,ED4BH,GAAD,mBAChBF,EAASG,mBADO,CAEnBH,EAASI,iBC7Bb,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADZ,IAACL,MDmBK,2CAAH,wD,cEhBlBM,EAAUC,IAAOC,IAAV,0MAqBPC,EAAeF,IAAOC,IAAV,0oBAYX,gBAAGE,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,MAAvB,OACRD,EACI,oBACAC,EACA,oBACAF,EACA,aACA,eAaK,qBAAGC,MAAqB,eAAiB,UAIzC,qBAAGC,MAAqB,eAAiB,U,OCqBzCC,EApEuB,SAAC,GAOhC,IANLf,EAMI,EANJA,SACAC,EAKI,EALJA,QACAe,EAII,EAJJA,SACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,eACAC,EACI,EADJA,WACI,EAC4BC,mBAAS,IADrC,mBACGC,EADH,KACaC,EADb,KAEEC,EAAgB,SAACC,GACrBF,EAAYE,EAAEC,cAAcC,QAK9B,OACE,eAAClB,EAAD,WACE,oBAAGmB,UAAU,SAAb,uBACaV,EADb,MAC4BC,EAAgB,OAE5C,qCACE,wBAAQU,wBAAyB,CAAEC,OAAQ7B,KAE1CC,EAAQF,KAAI,SAAC+B,EAAQC,GAAT,OACX,8BACE,eAACpB,EAAD,CAEEC,YAAaS,IAAaS,EAC1BjB,MACEQ,IAAaS,IAAoB,OAAVX,QAAU,IAAVA,OAAA,EAAAA,EAAYa,iBAAkBF,EAEvDhB,MACEO,IAAaS,QACEG,IAAfd,GACAA,EAAWa,gBAAkBF,EATjC,UAWE,uBACEI,KAAK,QACLC,KAAI,kBAAalB,GACjBmB,GAAE,gBAAWL,GACbL,MAAOI,EACPO,SAAUd,EACVe,QAASjB,IAAaS,IACxB,wBAAOS,QAAO,gBAAWR,GAASS,YAAU,SAA5C,UACE,sBAAMZ,wBAAyB,CAAEC,OAAQC,KACzC,uBAAMH,UAAU,QAAhB,UACE,sBAAMc,cAAY,OAAlB,oBACA,sBAAMd,UAAU,UAAhB,wBAEF,uBAAMA,UAAU,QAAhB,UACE,sBAAMc,cAAY,OAAlB,oBACA,sBAAMd,UAAU,UAAhB,+BAzBCG,IAFCC,MAiCZ,wBACEW,WAAUvB,EACVe,KAAK,SACLS,QAhDiB,WACvB3B,EAASK,IA4CL,2BCpEKuB,EAAiBnC,IAAOC,IAAV,sNAiBdmC,EAAgBpC,IAAOC,IAAV,wjECgCXoC,EA5CkB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAClB3B,mBAAiB,GADC,mBACvC4B,EADuC,KAC/BC,EAD+B,OAEV7B,mBAAiB,QAFP,mBAEvC5B,EAFuC,KAE3B0D,EAF2B,KAe9C,OACE,eAACN,EAAD,WACE,gEACA,eAACC,EAAD,WACE,uBAAON,QAAQ,SAAf,wDAGA,yBAAQH,GAAG,SAASD,KAAK,SAASE,SAlBjB,SAACb,GACtByB,EAAUE,OAAO3B,EAAEC,cAAcC,SAiB7B,UACE,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,sBAGJ,eAACmB,EAAD,WACE,uBAAON,QAAQ,aAAf,wCACA,yBAAQH,GAAG,aAAaD,KAAK,SAASE,SAtBjB,SAACb,GAC1B0B,EAAc1B,EAAEC,cAAcC,QAqB1B,UACE,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,wBAIJ,wBAAQC,UAAU,QAAQgB,QAzBZ,WAChBI,EAAMC,EAAQxD,IAwBZ,uBC1CO4D,EAAcC,YAAH,q+BAwDX7C,EAAUC,IAAOC,IAAV,4fCoFL4C,MA1Hf,WAAgB,IAAD,EACiBlC,oBAAS,GAD1B,mBACNmC,EADM,KACGC,EADH,OAEqBpC,mBAA0B,IAF/C,mBAENqC,EAFM,KAEKC,EAFL,OAGetC,mBAAS,GAHxB,mBAGNuC,EAHM,KAGEC,EAHF,OAIyBxC,mBAAyB,IAJlD,mBAINyC,EAJM,KAIOC,EAJP,OAKa1C,mBAAS,GALtB,mBAKN2C,EALM,KAKCC,EALD,OAMmB5C,oBAAS,GAN5B,mBAMN6C,EANM,KAMIC,EANJ,OAOiB9C,mBAAiB,GAPlC,mBAON+C,EAPM,KAOGC,EAPH,KAkBPC,EAAW,uCAAG,WAAOrB,EAAgBxD,GAAvB,eAAAC,EAAA,6DAClB+D,GAAW,GACXU,GAAY,GAFM,SAGS5E,EAAmB0D,EAAQxD,GAHpC,OAGZ8E,EAHY,OAIlBF,EAAWpB,GACXU,EAAaY,GACbN,EAAS,GACTF,EAAe,IACfF,EAAU,GACVJ,GAAW,GATO,4CAAH,wDAwCjB,OACE,qCACE,cAACJ,EAAD,IACA,eAAC,EAAD,WACE,+CACCa,EACC,cAAC,EAAD,CAASlB,MAAOsB,IA6BlB,KACEJ,EAAsD,KAA3C,oBAAGtC,UAAU,QAAb,oBAA6BoC,EAA7B,OACZR,EAAU,qDAA8B,KACvCA,GAAYU,EASV,KARF,cAAC,EAAD,CACEhD,WAAY0C,EAAS,EACrBzC,eAAgBiD,EAChBnE,SAAUyD,EAAUE,GAAQ3D,SAC5BC,QAASwD,EAAUE,GAAQ1D,QAC3BkB,WAAY0C,EAAcA,EAAYF,QAAU1B,EAChDjB,SAzEU,SAACK,GACnB,IAAK4C,EAAU,CAEb,IAAMnC,EAAST,EAETkD,EAAUd,EAAUE,GAAQvD,iBAAmB0B,EACjDyC,GAASP,GAAS,SAACQ,GAAD,OAAUA,EAAO,KAEvC,IAAMC,EAAe,CACnBzE,SAAUyD,EAAUE,GAAQ3D,SAC5B8B,SACAyC,UACAvC,cAAeyB,EAAUE,GAAQvD,gBAGnC0D,GAAe,SAACU,GAAD,4BAAcA,GAAd,CAAoBC,WA8D/BR,GACDV,GACDM,EAAYa,SAAWf,EAAS,GAChCA,IAAWQ,EAMP,KALF,8BACE,wBAAQxC,UAAU,OAAOgB,QA/Dd,WACnB,IAAMgC,EAAehB,EAAS,EAC1BgB,IAAiBR,EACnBD,GAAY,GAEZN,EAAUe,IA0DJ,oCC/HZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7b11280b.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\n// export enum Difficulty {\n//   EASY = 'easy',\n//   MEDIUM = 'medium',\n//   HARD = 'hard',\n// }\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: string\n) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=11&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","/* eslint-disable no-octal-escape */\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n  fieldset {\n    border: 0px;\n  }\n  legend {\n    max-width: 600px;\n    width: 100%;\n  }\n`;\n\ntype InputWrapperProps = {\n  userClicked: boolean;\n  right: boolean;\n  wrong: boolean;\n};\n\nexport const InputWrapper = styled.div<InputWrapperProps>`\n  label {\n    text-align: center;\n    white-space: nowrap;\n    display: inline-block;\n    color: #0071eb;\n    cursor: pointer;\n    background-color: #fff;\n    border-color: #0071eb;\n    font-weight: 400;\n    user-select: none;\n    vertical-align: middle;\n    border: ${({ userClicked, right, wrong }) =>\n      right\n        ? '3px solid #28A745'\n        : wrong\n        ? '3px solid #DC3545'\n        : userClicked\n        ? '2px dotted'\n        : '1px solid'};\n    font-size: 1rem;\n    border-radius: 0.25rem;\n    max-width: 600px;\n    width: 100%;\n    height: 40px;\n    padding: 5px 0 5px 0;\n    :hover {\n      opacity: 0.8;\n    }\n  }\n  .right {\n    margin-left: 3px;\n    display: ${({ right }) => (right ? 'inline-block' : 'none')};\n  }\n  .wrong {\n    margin-left: 3px;\n    display: ${({ wrong }) => (wrong ? 'inline-block' : 'none')};\n  }\n\n  input {\n    opacity: 0;\n  }\n`;\n","import React, { useState } from 'react';\nimport { AnswerObject } from '../App';\nimport { Wrapper, InputWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (arg0: string) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  questionNr,\n  totalQuestions,\n  userAnswer,\n}) => {\n  const [selected, setSelected] = useState('');\n  const onRadioChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSelected(e.currentTarget.value);\n  };\n  const onQuestionSubmit = () => {\n    callback(selected);\n  };\n  return (\n    <Wrapper>\n      <p className=\"number\">\n        Question: {questionNr} / {totalQuestions}{' '}\n      </p>\n      <fieldset>\n        <legend dangerouslySetInnerHTML={{ __html: question }} />\n\n        {answers.map((answer, index) => (\n          <div key={index}>\n            <InputWrapper\n              key={answer}\n              userClicked={selected === answer}\n              right={\n                selected === answer && userAnswer?.correctAnswer === answer\n              }\n              wrong={\n                selected === answer &&\n                userAnswer !== undefined &&\n                userAnswer.correctAnswer !== answer\n              }>\n              <input\n                type=\"radio\"\n                name={`question${questionNr}`}\n                id={`option${index}`}\n                value={answer}\n                onChange={onRadioChange}\n                checked={selected === answer}></input>\n              <label htmlFor={`option${index}`} aria-live=\"polite\">\n                <span dangerouslySetInnerHTML={{ __html: answer }} />\n                <span className=\"right\">\n                  <span aria-hidden=\"true\">&#10004;</span>\n                  <span className=\"sr-only\">correct</span>\n                </span>\n                <span className=\"wrong\">\n                  <span aria-hidden=\"true\">&#10008;</span>\n                  <span className=\"sr-only\">incorrect</span>\n                </span>\n              </label>\n            </InputWrapper>\n          </div>\n        ))}\n        <button\n          disabled={userAnswer ? true : false}\n          type=\"submit\"\n          onClick={onQuestionSubmit}>\n          Submit\n        </button>\n      </fieldset>\n    </Wrapper>\n  );\n};\n\nexport default QuestionCard;\n","import styled from 'styled-components';\n\nexport const LandingWrapper = styled.div`\n  max-width: 1100px;\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n  margin: 20px 0 20px 0;\n\n  h2 {\n    font-size: 1.5rem;\n  }\n\n  .start {\n    max-width: 200px;\n  }\n`;\n\nexport const SelectWrapper = styled.div`\n  margin: 20px 0 20px 0;\n\n  label {\n    font-size: 1.2rem;\n  }\n\n  select {\n    display: block;\n    font-size: 16px;\n    font-family: sans-serif;\n    font-weight: 700;\n    color: #444;\n    line-height: 1.3;\n    padding: 0.6em 1.4em 0.5em 0.8em;\n    margin: 0.5em;\n    width: 100%;\n    max-width: 100%; /* useful when width is set to anything other than 100% */\n    box-sizing: border-box;\n    border: 1px solid #aaa;\n    box-shadow: 0 1px 0 1px rgba(0, 0, 0, 0.04);\n    border-radius: 0.5em;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    appearance: none;\n    background-color: #fff;\n    background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007CB2%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E'),\n      linear-gradient(to bottom, #ffffff 0%, #e5e5e5 100%);\n    background-repeat: no-repeat, repeat;\n    /* arrow icon position (1em from the right, 50% vertical) , then gradient position*/\n    background-position: right 0.7em top 50%, 0 0;\n    /* icon size, then gradient */\n    background-size: 0.65em auto, 100%;\n  }\n\n  select::-ms-expand {\n    display: none;\n  }\n  /* Hover style */\n  select:hover {\n    border-color: #888;\n  }\n  /* Focus style */\n  select:focus {\n    border-color: #aaa;\n    box-shadow: 0 0 1px 3px rgba(59, 153, 252, 0.7);\n    box-shadow: 0 0 0 3px -moz-mac-focusring;\n    color: #222;\n    outline: none;\n  }\n\n  /* Set options to normal weight */\n  select option {\n    font-weight: normal;\n  }\n\n  /* Disabled styles */\n  select:disabled,\n  select[aria-disabled='true'] {\n    color: graytext;\n  }\n\n  select:disabled:hover,\n  select[aria-disabled='true'] {\n    border-color: #aaa;\n  }\n`;\n","import React, { useState } from 'react';\nimport { LandingWrapper, SelectWrapper } from './Landing.styles';\n\ntype Props = {\n  start: (arg0: number, arg1: string) => void;\n};\n\nconst Landing: React.FC<Props> = ({ start }) => {\n  const [totalQ, setTotalQ] = useState<number>(5);\n  const [difficulty, setDifficulty] = useState<string>('easy');\n\n  const onTotalQChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setTotalQ(Number(e.currentTarget.value));\n  };\n\n  const onDifficultyChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setDifficulty(e.currentTarget.value);\n  };\n\n  const startGame = () => {\n    start(totalQ, difficulty);\n  };\n  return (\n    <LandingWrapper>\n      <h2>Select your preference below: </h2>\n      <SelectWrapper>\n        <label htmlFor=\"totalQ\">\n          How many questions would you like to have?\n        </label>\n        <select id=\"totalQ\" name=\"select\" onChange={onTotalQChange}>\n          <option value=\"5\">5</option>\n          <option value=\"10\">10</option>\n          <option value=\"15\">15</option>\n        </select>\n      </SelectWrapper>\n      <SelectWrapper>\n        <label htmlFor=\"difficulty\">Which level of difficulty?</label>\n        <select id=\"difficulty\" name=\"select\" onChange={onDifficultyChange}>\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n      </SelectWrapper>\n\n      <button className=\"start\" onClick={startGame}>\n        Start\n      </button>\n    </LandingWrapper>\n  );\n};\n\nexport default Landing;\n","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  html{\n    height: 100%;\n  }\n\n  body {\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Source Sans Pro', sans-serif;\n  }\n\n  button {\n    padding: 10px 30px;\n    text-align: center;\n    white-space: nowrap;\n    cursor: pointer;\n    display: inline-block;\n    color: #fff;\n    cursor: pointer;\n    background-color: #0071eb;\n    border-color: #0071eb;\n    font-weight: 400;\n    user-select: none;\n    vertical-align: middle;\n    border: 1px solid transparent;\n    font-size: 1rem;\n    border-radius: 0.25rem;\n    margin: 10px 0 10px 0;\n  }\n\n  button:focus {\n    outline: '2px dashed'\n  }\n\n  button:disabled {\n    border-color: #848484;\n    background-color: #757575;\n  }\n\n  .sr-only {\n    position:absolute;\n    left:-10000px;\n    top:auto;\n    width:1px;\n    height:1px;\n    overflow:hidden;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n\n  > p {\n    color: #fff;\n  }\n\n  .score {\n    color: #000;\n    font-size: 1.2rem;\n    margin: 0;\n    font-family: 'Permanent Marker', sans-serif;\n  }\n\n  h1 {\n    font-family: 'Permanent Marker', sans-serif;\n    font-size: 3rem;\n    color: #0071eb;\n    text-align: center;\n    margin: 10px;\n  }\n\n  img {\n    max-width: 600px;\n    height: auto;\n  }\n\n  .next {\n    max-width: 200px;\n  }\n`;\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\nimport movies from './images/movies.jpeg';\n//component\nimport QuestionCard from './components/QuestionCard';\nimport Landing from './components/Landing';\n//types\nimport { QuestionState } from './API';\n\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\n//const TOTAL_QUESTIONS = 3;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [qLength, setQLength] = useState<number>(5);\n  // const [difficulty, setDifficulty] = useState<string>('easy');\n\n  // const onTotalQChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n  //   setTotalQ(Number(e.currentTarget.value));\n  // };\n\n  // const onDifficultyChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n  //   setDifficulty(e.currentTarget.value);\n  // };\n\n  const startTrivia = async (totalQ: number, difficulty: string) => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(totalQ, difficulty);\n    setQLength(totalQ);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (selected: string) => {\n    if (!gameOver) {\n      // user answer\n      const answer = selected;\n      //check answer\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore((prev) => prev + 1);\n      //save user answer\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === qLength) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Films Travia!</h1>\n        {gameOver ? (\n          <Landing start={startTrivia} />\n        ) : // <div className=\"landing\">\n        //   <div>\n        //     <label htmlFor=\"totalQ\">\n        //       How many questions would you like to have?\n        //     </label>\n        //     <select id=\"totalQ\" name=\"select\" onChange={onTotalQChange}>\n        //       <option value=\"5\">5</option>\n        //       <option value=\"10\">10</option>\n        //       <option value=\"15\">15</option>\n        //     </select>\n        //   </div>\n        //   <div>\n        //     <label htmlFor=\"difficulty\">Which level of difficulty?</label>\n        //     <select\n        //       id=\"difficulty\"\n        //       name=\"select\"\n        //       onChange={onDifficultyChange}>\n        //       <option value=\"easy\">Easy</option>\n        //       <option value=\"medium\">Medium</option>\n        //       <option value=\"hard\">Hard</option>\n        //     </select>\n        //   </div>\n\n        //   <button className=\"start\" onClick={startTrivia}>\n        //     Start\n        //   </button>\n\n        // </div>\n        null}\n        {!gameOver ? <p className=\"score\">Score: {score} </p> : null}\n        {loading ? <p>Loading Questions...</p> : null}\n        {!loading && !gameOver ? (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={qLength}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        ) : null}\n\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== qLength ? (\n          <div>\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n          </div>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}